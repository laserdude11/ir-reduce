#:kivy 1.8.0
#:import Factory kivy.factory.Factory
#:import re re

<ActionSpinnerOptions@SpinnerOption>
    background_color: .4, .4, .4, 1

<ActionSpinner@Spinner+ActionItem>
    canvas.before:
        Color:
            rgba: 0.128, 0.128, 0.128, 1
        Rectangle:
            size: self.size
            pos: self.pos
    border: 27, 20, 12, 12
    background_normal: 'atlas://data/images/defaulttheme/action_group'
    option_cls: Factory.ActionSpinnerOptions

<ActionDropdown>:
    on_size: self.width = '220dp'
    
<ApertureSlider>:
    slider: sl
    trash: bu
    plot_points: tfscreen.tplot.points
    Slider:
        id: sl
        on_value: root.fix_line(self.value)
    Button:
        id: bu
        background_normal: 'atlas://resources/buttons/gc-normal'
        background_down: 'atlas://resources/buttons/gc-pressed'

<BorderBox>:
    padding: self.borderweight
    the_container: anchorchild
    canvas.before:
        Color:
            rgba: 1, 1, 1, 1
        Rectangle:
            size: self.size
            pos: self.pos
        Color:
            rgba: 0, 0, 0, 1
        Rectangle:
            size: (x - self.borderweight for x in self.size)
            pos: self.x + self.borderweight, self.y + self.borderweight
    AnchorLayout:
        id: anchorchild

<ObsfileInsert>:
    orientation: 'horizontal'
    size_hint: 1, 0.3
    Label:
        text: root.obsfile.fitsfile
        size_hint_x: 0.5
    Spinner:
        id: spnr
        text: root.dithertype
        values: ['A', 'B', 'X']
        on_text: root.dithertype = self.text
    Button:
        text: 'Header'
        on_press: self.launch_header()

<SpecscrollInsert>:
    orientation: 'horizontal'
    size_hint: 1, None
    height: '30dp'
    Label:
        text: root.text
    Checkbox:
        size_hint: None, None
        height: '30dp'
        width: '30dp'
        active: root.active
        on_active: root.active = self.active

<IRScreen>:
    ScrollView:
        do_scroll_x: False
        do_scroll_y: False if root.fullscreen else (content.height > root.height - dp(16))
        AnchorLayout:
            size_hint_y: None
            height: root.height if root.fullscreen else max(root.height, content.height)
            GridLayout:
                id: content
                cols: 2
                spacing: '8dp'
                padding: '8dp'
                size_hint: (1, 1) if root.fullscreen else (.9, None)
                height: self.height if root.fullscreen else self.minimum_height

<TelluricScreen>:
    name: 'telluric'
    id: tellscreen
    BoxLayout:
        orientation: 'vertical'
        Image:
            size_hint: None, None
            size: self.texture_size
            source: 'resources/stopsign.png'
        AnchorLayout:
            Label:
                valign: 'center'
                halign: 'center'
                text: 'This area is under construction'

<CombineScreen>:
    name: 'combine'
    id: combine
    speclist: [re.sub('.fits','',x.fitsfile) for x in app.current_target.images]
    paths: app.current_paths
    BoxLayout:
        orientation: 'vertical'
        Graph:
            id: multispec
            size_hint_y: 0.35
            xlabel: 'Wavelength'
            ylabel: 'Counts'
            x_ticks_minor: int((root.wmax-root.wmin)/10.)
            x_ticks_major: int((root.wmax-root.wmin)/5.)
            y_ticks_minor: int((root.dmax - root.dmin) / 10.)
            y_ticks_major: int((root.dmax - root.dmin) / 5.)
            x_grid_label: True
            y_grid_label: True
            xlog: False
            ylog: False
            x_grid: False
            y_grid: False
            xmin: root.wmin
            xmax: root.wmax
            ymin: root.dmin
            ymax: root.dmax
            label_options: {'bold': True}
        Graph:
            id: combspec
            size_hint_y: 0.35
            xlabel: 'Wavelength'
            ylabel: 'Counts'
            x_ticks_minor: int((root.wmax-root.wmin)/10.)
            x_ticks_major: int((root.wmax-root.wmin)/5.)
            y_ticks_minor: int((root.dmax - root.dmin) / 10.)
            y_ticks_major: int((root.dmax - root.dmin) / 5.)
            x_grid_label: True
            y_grid_label: True
            xlog: False
            ylog: False
            x_grid: False
            y_grid: False
            xmin: root.wmin
            xmax: root.wmax
            ymin: root.dmin
            ymax: root.dmax
            label_options: {'bold': True}
        BoxLayout:
            size_hint_y: 0.3
            orientation: 'horizontal'
            BorderBox:
                ScrollView:
                    BoxLayout:
                        id: specscroll
                        orientation: 'vertical'
            BoxLayout:
                orientation: 'vertical'
                Spinner:
                    text: 'Choose a fiducial for scaling'
                    values: root.speclist
                    on_text: root.set_scale(self.text)
                BoxLayout:
                    orientation: 'horizontal'
                    ToggleButton:
                        id: median
                        text: 'Median'
                        group: 'medmean'
                        state: 'down'
                        on_state: if state == 'down': root.comb_method = 'median'
                    ToggleButton:
                        text: 'Weighted Mean'
                        group: 'medmean'
                        state: 'up'
                        on_state: if state == 'down': root.comb_method = 'mean'
                BoxLayout:
                    orientation: 'horizontal'
                    TextInput:
                        id: savefile
                        size_hint_x: 0.7
                        text: app.current_target.id+'.fits'
                    Button:
                        size_hint_x: 0.3
                        text: 'Save'
                        on_press: root.combine()

                
<WavecalScreen>:
    name: 'wavecal'
    id: wvscreen
    paths: app.current_paths
    speclist: [re.sub('.fits','',x.fitsfile) for x in app.current_target.images]
    BoxLayout:
        orientation: 'vertical'
        Graph:
            id: specdisplay
            size_hint_y: 0.6
            xlabel: 'Wavelength'
            ylabel: 'Counts'
            x_ticks_minor: int((root.wmax-root.wmin)/10.)
            x_ticks_major: int((root.wmax-root.wmin)/5.)
            y_ticks_minor: int((root.dmax - root.dmin) / 10.)
            y_ticks_major: int((root.dmax - root.dmin) / 5.)
            x_grid_label: True
            y_grid_label: True
            xlog: False
            ylog: False
            x_grid: False
            y_grid: False
            xmin: root.wmin
            xmax: root.wmax
            ymin: root.dmin
            ymax: root.dmax
            label_options: {'bold': True}
        GridLayout:
            cols: 2
            size_hint_y: 0.4
            BoxLayout:
                orientation: 'vertical
                Spinner:
                    id: specspin
                    text: 'Choose a spectrum'
                    values: root.speclist
                    on_text: root.set_spectrum(self.text)
                Label:
                   text: 'Expected wavelength range:'
                BoxLayout:
                    orientation: 'horizontal'
                    Label:
                        text: 'Min:'
                    TextInput:
                        id: rmin
                        text: root.wmin
                        on_focus: if not self.focus: root.set_wmin(self.text)
                    Label:
                        text: 'Max:'
                    TextInput:
                        id: rmin
                        text: root.wmax
                        on_focus: if not self.focus: root.set_wmax(self.text)
                BoxLayout:
                    orientation: 'horizontal'
                    Button:
                        text: 'Calibrate'
                        on_press: root.wavecal()
                    Button:
                        text: 'Save Spectrum'
                        on_press: root.save_spectrum()
            BoxLayout:
                orientation: 'vertical'
                ComboEdit:
                    id: linelist
                    multiline: False
                    text: 'Reference line list'
                    options: root.linelist_buttons
                    on_focus: if not self.focus: root.set_linelist(self.text)
                BorderBox:
                    size_hint_y: 0.5
                    BoxLayout:
                        orientation: 'vertical'
                        ToggleButton:
                            id: lampcal
                            text: 'Use lamp calibrations'
                            group: 'caltype'
                            state: 'down'
                        ToggleButton:
                            text: 'Use sky lines'
                            group: 'caltype'
                            state: 'up'
                BoxLayout:
                    orientation: 'horizontal'
                    Label:
                        text: '# of iterations:'
                    TextInput:
                        id: numiter
                        text: root.iters
                            
        

<TracefitScreen>:
    name: 'trace'
    id: tfscreen
    paths: app.current_paths
    current_target: app.current_target
    pairstrings: ['%s - %s' % (x.fitsfile for x in y) for y in app.extract_pairs]
    BoxLayout:
        orientation: 'vertical'
        size_hint_x: 0.4
        Spinner:
            text: 'Choose an image pair:'
            values: root.pairstrings
            on_text: root.set_imagepair(self.text)
            size_hint: 1, 0.1
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: 0.1
            Label:
                text: 'Positive Apertures:'
            Button:
                background_normal: 'atlas://resources/buttons/an-normal.png'
                background_down: 'atlas://resources/buttons/an-pressed.png'
                size_hint: None, None
                size: 24, 24
                on_press: root.add_postrace()
        BorderBox:
            size_hint_y: 0.25
            ScrollView:
                do_scroll_x: False
                effect_cls: DampedScrollEffect
                GridLayout:
                    cols: 1
                    id: postrace
                    spacing: [0,3]
                    row_default_height: 24
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: 0.1
            Label:
                text: 'Negative Apertures:'
            Button:
                background_normal: 'atlas://buttons/buttons/an-normal'
                background_down: 'atlas://buttons/buttons/an-pressed'
                size_hint: None, None
                size: 24, 24
                on_press: root.add_negtrace()
        BorderBox:
            size_hint_y: 0.25
            ScrollView:
                do_scroll_x: False
                effect_cls: DampedScrollEffect
                GridLayout:
                    cols: 1
                    id: negtrace
                    spacing: [0,3]
                    row_default_height: 24
        GridLayout:
            size_hint_y: 0.2
            cols: 2
            Button:
                text: 'Set Fit (1)'
                on_press: root.set_psf()
            Button:
                text: 'Fit Trace (2, 4)'
                on_press: root.fit_trace()
            Button:
                text: 'Fix Distortion (3)'
                on_press: root.fix_distort()
            Button:
                text: 'Extract Spectrum (5)'
                on_press: root.extract_spectrum()
    BoxLayout:
        orientation: 'vertical'
        size_hint_x: 0.6
        Graph:
            id: the_graph
            size_hint_y: 0.7
            xlabel: 'Pixel'
            ylabel: 'Mean Counts'
            x_ticks_minor: 5
            x_ticks_major: 10
            y_ticks_minor: (root.drange[1] - root.drange[0]) / float(10)
            y_ticks_major: (root.drange[1] - root.drange[0]) / float(5)
            x_grid_label: True
            y_grid_label: True
            xlog: False
            ylog: False
            x_grid: False
            y_grid: False
            xmin: 0
            xmax: len(root.tplot.points)
            ymin: root.drange[0]
            ymax: root.drange[1]
            label_options: {'bold': True}
        StencilView:
            canvas.before:
                Rectangle:
                    size: self.size
                    pos: self.pos
                    texture: root.iregion
        

<ExtractRegionScreen>:
    name: 'region'
    imcanvas: ipane.ids.the_image
    paths: app.current_paths
    extract_pairs: app.extract_pairs
    pairstrings: ['%s - %s' % (x.fitsfile for x in y) for y in self.extract_pairs]
    BoxLayout:
        orientation: 'vertical'
        size_hint_x: 0.4
        Spinner:
            text: 'Choose an image pair:'
            values: root.pairstrings
            on_text: root.set_imagepair(self.text)
            size_hint: 1, 0.1
        BorderBox:
            size_hint: 1, 0.4
            BoxLayout:
                orientation: 'vertical'
                BoxLayout:
                    orientation: 'horizontal'
                    size_hint: 1, 0.25
                    Label:
                        text: 'X1:'
                        size_hint: 0.4, 1
                    TextInput:
                        id: x1t
                        text: self.bx1
                        multiline: False
                        on_focus: if not self.focus: root.set_coord('x1', self.text)
                Slider:
                    id: x1s
                    min: 0
                    max: root.imwid
                    step: 1
                    value: self.bx1
                    size_hint: 1, 0.25
                    on_value: root.set_coord('x1', self.value)
                BoxLayout:
                    orientation: 'horizontal'
                    size_hint: 1, 0.25
                    Label:
                        text: 'Y1:'
                        size_hint: 0.4, 1
                    TextInput:
                        id: y1t
                        text: self.by1
                        multiline: False
                        on_focus: if not self.focus: root.set_coord('y1', self.text)
                Slider:
                    id: y1s
                    min: 0
                    max: root.imwid
                    step: 1
                    value: self.by1
                    size_hint: 1, 0.25
                    on_value: root.set_coord('y1', self.value)
        BorderBox:
            size_hint: 1, 0.4
            BoxLayout:
                orientation: 'vertical'
                BoxLayout:
                    orientation: 'horizontal'
                    size_hint: 1, 0.25
                    Label:
                        text: 'X2:'
                        size_hint: 0.4, 1
                    TextInput:
                        id: x2t
                        text: self.bx2
                        multiline: False
                        on_focus: if not self.focus: root.set_coord('x2', self.text)
                Slider:
                    id: x2s
                    min: 0
                    max: root.imwid
                    step: 1
                    value: self.bx2
                    size_hint: 1, 0.25
                    on_value: root.set_coord('x2', self.value)
                BoxLayout:
                    orientation: 'horizontal'
                    size_hint: 1, 0.25
                    Label:
                        text: 'Y2:'
                        size_hint: 0.4, 1
                    TextInput:
                        id: y2t
                        text: self.by2
                        multiline: False
                        on_focus: if not self.focus: root.set_coord('y2', self.text)
                Slider:
                    id: y2s
                    min: 0
                    max: root.imwid
                    step: 1
                    value: self.by2
                    size_hint: 1, 0.25
                    on_value: root.set_coord('y2', self.value)
        Button:
            text: 'Select Extraction Region'
            size_hint: 1, 0.1
            on_press: root.save_region()
    ImagePane:
        id: ipane
        size_hint_x: 0.6

<ObservingScreen>:
    name: 'observing'
    obsrun_list: self.obsids.keys()
    BoxLayout:
        orientation: 'vertical'
        ComboEdit:
            id: obsrun
            multiline: False
            text: 'Observing Run ID'
            size_hint: 0.8, 0.1
            options: root.obsrun_buttons
            on_focus: if not self.focus: root.set_obsrun()
        ComboEdit:
            id: obsnight
            multiline: False
            text: 'Observation Date'
            size_hint: 0.8, 0.1
            options: root.obsnight_buttons
            on_focus: if not self.focus: root.set_obsnight()
        BoxLayout:
            size_hint: 1, 0.1
            TextInput:
                id: rawpath
                text: 'Path to Raw Images'
                size_hint_x: 0.6
                multiline: False
            Button:
                text: 'Choose'
                size_hint_x: 0.4
                on_press: root.pick_rawpath()
        BoxLayout:
            size_hint: 1, 0.1
            TextInput:
                id: outpath
                text: 'Path to Output'
                size_hint_x: 0.6
                multiline: False
            Button:
                text: 'Choose'
                size_hint_x: 0.4
                on_press: root.pick_outpath()
        BoxLayout:
            size_hint: 1, 0.1
            TextInput:
                id: calpath
                text: 'Path to Calibration Images'
                size_hint_x: 0.6
                multiline: False
            Button:
                text: 'Choose'
                size_hint_x: 0.4
                on_press: root.pick_calpath()
        Label:
            size_hint: 0.8, 0.1
            text: 'File format:'
            halign: 'left'
        TextInput:
            id: fformat
            text: 'obs.####'
            size_hint: 1, 0.1
            multiline: False
        Spinner:
            id: caltypes
            size_hint: 0.8, 0.1
            text: 'Calibration Images'
            values: ['Flats (lamps ON)', 'Flats (lamps OFF)', 'Arc Lamps']
            on_text: root.set_caltype(self.text)
        TextInput:
            id: calfiles
            text: '1-10'
            size_hint: 1, 0.1
            multiline: False
        BoxLayout:
            size_hint: 1, 0.1
            Button:
                text: 'Make Cals'
                on_press: root.make_cals()
            Button:
                text: 'Save'
                on_press: root.save_night()
    BoxLayout:
        orientation: 'vertical'
        Spinner:
            id: targs
            size_hint: 1, 0.1
            text: 'Targets'
            values: root.target_list
            on_text: root.set_target()
        Button:
            size_hint: 1, 0.1
            text: 'Add target'
            on_press: root.add_target()
        BorderBox:
            size_hint: 1., 0.4
            ScrollView:
                do_scroll_x: False
                effect_cls: DampedScrollEffect
                BoxLayout:
                    orientation: 'vertical'
                    id: obsfiles
        TextInput:
            id: tnotes
            multiline: True
            size_hint: 1, 0.3
            text: root.current_target.notes
        Button:
            size_hint: 1, 0.1
            text: 'Save Target'
            on_press: root.save_target()


<InstrumentScreen>:
    name: 'instrument'
    BoxLayout:
        orientation: 'vertical'
        ComboEdit:
            id: iprof
            multiline: False
            text: 'Instrument Profile ID'
            size_hint: 0.8, 0.1
            options: root.instrument_list
            on_focus: root.set_instrument()
        BorderBox:
            size_hint: 0.8, 0.3
            BoxLayout:
                orientation: 'vertical'
                Label:
                    text: 'Trace Direction:'
                    halign: 'left'
                ToggleButton:
                    id: trace_h
                    text: 'Horizontal'
                    group: 'tracedir'
                    state: 'down' if root.current_instrument.direction == 'horizontal' else 'normal'
                ToggleButton:
                    id: trace_v
                    text: 'Vertical'
                    group: 'tracedir'
                    state: 'down' if root.current_instrument.direction == 'vertical' else 'normal'
        BorderBox:
            size_hint: 0.8, 0.2
            BoxLayout:
                orientation: 'vertical'
                Label:
                    text: 'Detector Dimensions:'
                    halign: 'left'
                BoxLayout:
                    orientation: 'horizontal'
                    Label:
                        text: 'X:'
                    TextInput:
                        id: xdim
                        multiline: False
                        text: root.current_instrument.dimensions[0]
                    Label:
                        text: 'Y'
                    TextInput:
                        id: ydim
                        multiline: False
                        text: root.current_instrument.dimensions[1]
        BorderBox:
            size_hint: 0.8, 0.4
            TextInput:
                id: idesc
                text: root.current_instrument.description
    BoxLayout:
        orientation: 'vertical'
        Label:
            text: '~Fits Header Keywords~'
            text_size: 14
            size_hint: 0.8, 0.1
            halign: 'center'
        Label:
            text: 'Exposure Time:'
            size_hint: 0.8, 0.1
        TextInput:
            id: etime
            text: root.current_instrument.headerkeys['exp']
            multiline: False
            size_hint: 1, 0.1
        Label:
            text: 'Airmass:'
            size_hint: 0.8, 0.1
        TextInput:
            id: secz
            text: root.current_instrument.headerkeys['air']
            multiline: False
            size_hint: 1, 0.1
        Label:
            text: 'Image Type:'
            size_hint: 0.8, 0.1
        TextInput:
            id: itype
            text: root.current_instrument.headerkeys['type']
            multiline: False
            size_hint: 1, 0.1
        Widget:
        Button:
            text: 'Save Instrument Profile'
            size_hint: 0.8, 0.1
            on_press: root.save_instrument()

BoxLayout:
    orientation: 'vertical'
    ActionBar:
        ActionView:
            id: av
            ActionPrevious:
                with_previous: False
                title: app.current_title
            ActionSpinner:
                id: spnr
                important: True
                text: 'Choose a step'
                values: app.screen_names
                on_text:
                    if sm.current != args[1]:\
                    idx = app.screen_names.index(args[1]);\
                    app.go_screen(idx)
            ActionButton:
                text: 'Previous'
                icon: 'atlas://resources/buttons/left-normal.png'
                on_release: app.go_previous()
            ActionButton:
                text: 'Next'
                icon: 'atlas://resources/buttons/right-normal.png'
                on_release: app.go_next()
    ScreenManager:
        id: sm
        transition: FadeTransition()
        on_current_screen: spnr.text = args[1].name
